/**
 * Problem description:
 El Grinch est√° abriendo las cartas que iban a Santa Claus y las est√° dejando hechas un l√≠o. üò±

 Las cartas son una cadena de texto que incluyen regalos y par√©ntesis ().

 Para saber si una carta es v√°lida ‚úÖ, debes comprobar que los par√©ntesis cierran correctamente y que, adem√°s, no vayan
 vac√≠os.

 ¬°Pero ojo! Porque el Grinch ha dejado llaves { y corchetes [ dentro de los par√©ntesis que hacen que no sean v√°lidas.
 Por suerte s√≥lo los ha dejado en medio de los par√©ntesis...

Ejemplos:

"bici coche (bal√≥n) bici coche peluche" // -> ‚úÖ
"(mu√±eca) consola bici" // ‚úÖ

"bici coche (bal√≥n bici coche" // -> ‚ùå
"peluche (bici [coche) bici coche bal√≥n" // -> ‚ùå
"(peluche {) bici" // -> ‚ùå
"() bici" // ‚ùå

Crea una funci√≥n que pas√°ndole el texto de la carta, devuelva true si es v√°lida y false si no lo es. ¬°Y acaba con la
travesura del Grinch!
 */

/**
 * Title: Checking valid strings via regular expressions
 * Comment:
 * 1. To scape the parenthesis () and brackets [] we use the backwards slash \.
 * 2. The | character is a logical OR
 * 3. The first part of the logical operation, '\(\)', looks for empty parenthesis ()
 * 4. The second part of the logical operation, '[\[\]{}]', looks for brackets, '[' or ']',  and braces, '{' or '}'.
 *      The first and the last characters of the expressions are also brackets, but their not escpaed, which means that
 *      every character inside them are what we are looking for: '[' or ']' or '{' or '}'.
 * 5. The third part of the expression, '\([^\)]*$', looks for unclosed parenthesis. It only works for 1-depth
 *      parenthesis, enough for this game.
 */

export default function isValid(letter) {
    return letter.match(/\(\)|[\[\]{}]|\([^\)]*$/) == null
}